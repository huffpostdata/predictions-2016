var races=data.model.races

#senate-races
  h2 - State By State

  p - Our <a href="#">FIXME algorithm</a> calculated the probabile outcome in each state. Hereâ€™s the breakdown.

  .container
    .axis-50
    ul
      li data-state-code="${race.state_code}" for(race in races.sorted_by('dem-win-probability'))
        .state-code - ${race.state_code}
        .probability
          .box
            .marker.${race.dem_win_prob_with_undecided > 0.5 ? 'lean-dem' : (race.dem_win_prob_with_undecided == 0.5 ? 'toss-up' : 'lean-gop')} style="left: ${100 * (1 - race.dem_win_prob_with_undecided)}%"
          if(race.curve.is_plottable)
            .chart-container
              h3 - ${race.state_code}
              .grid
                .x-axis
                .y-axis
                  .max - D+${race.curve.y_max * 100}
                  .zero - 0
                  .min - R+${race.curve.y_max * 100}
                svg viewBox="0 0 1000 600" width="20rem" height="12rem"
                  rect.dem x="0" y="0" width="1000" height="300"
                  rect.gop x="0" y="300" width="1000" height="300"
                  path.x-axis d="M0,300H1000"
                  path.x-start-day d="M0,0V600"
                  if(race.curve.updated_at_x != race.curve.x_max)
                    path.x-updated-at d="M${Math.round(race.curve.date_width * race.curve.updated_at_x)},0V600"
                  path.x-election-day d="M1000,0V600"
                  path.diff d="${race.curve.svg_path('diff_xibar')}"
                  path.sample d="${d}" for(d in race.curve.calculate_sample_svg_paths())
                  circle.poll.${pt.html_class} cx="${pt.x}" cy="${pt.y}" r="8" for(pt in race.curve.calculate_poll_coordinates())

            ol.calculations
              var o=race.calculations
              if(o.tie === 0.5)
                li - Our simulations ended in a <span class="undecided">tie</span> between <span class="dem">${race.dem_name} (D)</span> and <span class="gop">${race.gop_name} (R)</span>.
              else
                li - In our simulations, <span class="${o.winner_party}">${o.winner_name} (${o.winner_party_letter})</span> won against <span class="${o.loser_party}">${o.loser_name} (${o.loser_party_letter})</span> <strong>${o.raw_prob}%</strong> of the time.
                li - Our simulations also show that the polled population is <span class="undecided">${o.undecided}% undecided</span>. We penalized the winner by <strong>${o.undecided_penalty}</strong> ${o.undecided_penalty == 1 ? 'percentage point' : 'percentage points'}.
                li - Our adjusted probability is <span class="${o.winner_party}">${o.prob_with_undecided}% ${o.winner_party_full}</span>
